//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace A4WebServiceClient.MathService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MathService.IMathService")]
    public interface IMathService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/add", ReplyAction="http://tempuri.org/IMathService/addResponse")]
        int add(int n1, int n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/add", ReplyAction="http://tempuri.org/IMathService/addResponse")]
        System.Threading.Tasks.Task<int> addAsync(int n1, int n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/subtract", ReplyAction="http://tempuri.org/IMathService/subtractResponse")]
        int subtract(int n1, int n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/subtract", ReplyAction="http://tempuri.org/IMathService/subtractResponse")]
        System.Threading.Tasks.Task<int> subtractAsync(int n1, int n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/multiply", ReplyAction="http://tempuri.org/IMathService/multiplyResponse")]
        int multiply(int n1, int n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/multiply", ReplyAction="http://tempuri.org/IMathService/multiplyResponse")]
        System.Threading.Tasks.Task<int> multiplyAsync(int n1, int n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Divide", ReplyAction="http://tempuri.org/IMathService/DivideResponse")]
        int Divide(int n1, int n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMathService/Divide", ReplyAction="http://tempuri.org/IMathService/DivideResponse")]
        System.Threading.Tasks.Task<int> DivideAsync(int n1, int n2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMathServiceChannel : A4WebServiceClient.MathService.IMathService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MathServiceClient : System.ServiceModel.ClientBase<A4WebServiceClient.MathService.IMathService>, A4WebServiceClient.MathService.IMathService {
        
        public MathServiceClient() {
        }
        
        public MathServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MathServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int add(int n1, int n2) {
            return base.Channel.add(n1, n2);
        }
        
        public System.Threading.Tasks.Task<int> addAsync(int n1, int n2) {
            return base.Channel.addAsync(n1, n2);
        }
        
        public int subtract(int n1, int n2) {
            return base.Channel.subtract(n1, n2);
        }
        
        public System.Threading.Tasks.Task<int> subtractAsync(int n1, int n2) {
            return base.Channel.subtractAsync(n1, n2);
        }
        
        public int multiply(int n1, int n2) {
            return base.Channel.multiply(n1, n2);
        }
        
        public System.Threading.Tasks.Task<int> multiplyAsync(int n1, int n2) {
            return base.Channel.multiplyAsync(n1, n2);
        }
        
        public int Divide(int n1, int n2) {
            return base.Channel.Divide(n1, n2);
        }
        
        public System.Threading.Tasks.Task<int> DivideAsync(int n1, int n2) {
            return base.Channel.DivideAsync(n1, n2);
        }
    }
}
